<!--
    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<!--
    Copyright (c) 2014, Joyent, Inc.
-->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<html> 
<head> 
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
    <title>Cloud Analytics</title> 
    <link href="/fishbulb/css/app.css" rel="stylesheet" type="text/css"></link>
    <link href="/fishbulb/css/ca.css" rel="stylesheet" type="text/css"></link>
    <link href="/fishbulb/css/jquery-ui-1.9.2.custom.css" rel="stylesheet" type="text/css" ></link>
    <link href="/fishbulb/css/jquery.contextMenu.css" rel="stylesheet" type="text/css" ></link>
    <link href="/fishbulb/css/rickshaw/detail.css" rel="stylesheet" type="text/css" ></link>
    <link href="/fishbulb/css/rickshaw/graph.css" rel="stylesheet" type="text/css" ></link>
    <link href="/fishbulb/css/rickshaw/legend.css" rel="stylesheet" type="text/css" ></link>
    <script language="javascript" type="text/javascript" src="/fishbulb/js/jquery/jquery-1.8.3.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/jquery/jquery-ui-1.9.2.custom.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/jquery/jquery.contextMenu.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/jquery/jquery.colorhelpers.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/jquery/jquery.dataTables.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/rickshaw/d3.v2.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/rickshaw/rickshaw.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/ca/subr.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/ca/color.js"></script> 
    <script language="javascript" type="text/javascript" src="/fishbulb/js/ca/ca.js"></script> 
</head> 
<body> 
   <div class="capBody">
        <div class="capConsole">
            <div class="capConsoleHeader">
            <span class="capHeader">Cloud Analytics</span> 
        </div>
   </div>
</div>
<script>
var capBackend;             /* see ca.js */
var capConf;                /* see ca.js */
var capPanel;               /* see ca.js */
var capWidgetTimer;         /* timer handle for updating widgets */
var capWidgets = [];            /* all widgets in the panel */

/*
 * DOM nodes
 */
var capDomContent;                                     /* body of the panel */

var capDefaultIp = window.location.hostname;           /* default backend IP */
var capDefaultPort = Number(window.location.port);
var capDefaultProtocol = 'https';
var capLegendWidth = 200;                              /* legend width */
var capSliderWidth = 50;                               /* heat map slider width */
var capGraphHeight = 200;                              /* graph height */
var capGraphWidth;                                     /* graph width (auto-configured) */
var capConfig = {                                      /* CA backend configuration */
    type: 'direct',
    host: capDefaultIp,
    port: capDefaultPort || 443,
    protocol: capDefaultProtocol,
    customer: getParameterByName('user') || null,      // ?user=uuid
    zonename: getParameterByName('vm') || null,        // ?vm=uuid
    hostname: getParameterByName('server') || null     // ?server=server name
};

var capTitle = 'Cloud Analytics';
if (capConfig.zonename) {
    capTitle = capTitle + ' for VM UUID: ' + capConfig.zonename;
} else if (capConfig.customer) {
    capTitle = capTitle + ' for User UUID ' + capConfig.customer;
} else if (capConfig.hostname) {
    capTitle = capTitle + ' for Server Name ' + capConfig.hostname;
}
$('.capHeader').text(capTitle);
/*
 * Prompt the user for backend configuration details once the whole document is
 * loaded.
 */
$(document).ready(capInitConfig);
/*
 * Initialize this application based on the user-entered configuration
 * describing how to connect to the remote CA service.
 */
function capInitConfig() {
    capDomContent = $('.capConsole');

    capBackend = caBackendCreate(capConfig);
    capPanel = new caPanel({backend: capBackend});
    capPanel.on('error', capError);
    capConf = new caConf({backend: capBackend});

    jQuery.ajaxSetup({
        beforeSend: function(xhr) {
            xhr.setRequestHeader('x-adminui-token', window.localStorage.getItem('api-token'))
        }
    });

    capConf.load(function (err) {
        if (err) {
            jsFatalError(err);
        }

        capGraphWidth = $(capDomContent).width() - capLegendWidth - 30 - capSliderWidth;
        capInitSelectors();
        capPanel.unpause();
        capWidgetTimer = setInterval(capTick, 1000);
    });
}

/*
 * Initialize the main metric selector widget based on the available metrics.
 */
function capInitSelectors() {
    var groupdiv = jsCreateElement('div', 'capControls');
    capDomContent[0].appendChild(groupdiv);
    capDomContent[0].appendChild(jsCreateElement('div', 'capHorizontalSeparator'));

    var widget = new caWidgetCreateInstn({
        conf: capConf,
        oncreate: capInstnCreate
    });
    groupdiv.appendChild(widget.caElement);

    var div = jsCreateElement('div');
    var loadFor = capConfig.zonename ? 'vm' : 'user';
    div.appendChild(jsCreateText('Load ' + (capConfig.customer ? loadFor : 'server')
     + ' instrumentations'));
    groupdiv.appendChild(div);
    $(div).button().click(function () {
        $(div).fadeOut(250, function () {
            $(div).remove();
        });
        capLoadServerInstns();
    });
}

/*
 * Invoked when the user clicks "Create" to create a new instrumentation as well
 * as a new widget to present it.
 */
function capInstnCreate(params) {
    capBackend.instnCreate(params, function (err, instn) {
        if (err) {
            jsFatalError(err);
        }

        capInstnMakeWidget(instn, capInstnRemoveNew);
    });
}

/*
 * Load instrumentations that already exist on the server and create widgets for
 * each one.
 */
function capLoadServerInstns() {
    capBackend.instnsList(function (err, instns) {
        if (err) {
            jsFatalError(err);
        }

        instns.forEach(function (instn) {
            capInstnMakeWidget(instn, capInstnRemoveServer);
        });
    });
}

/*
 * Invoked once per second to update each widget.
 */
function capTick() {
    capWidgets.forEach(function (w) { w.tick(); });
}

/*
 * Create a new widget for the given instrumentation.  This is used for both
 * instrumentations created by this user during this session as well as those
 * which were loaded from the server.  The "remove" callback is invoked when the
 * user asks to removes the widget, and this callback is responsible for
 * actually removing the widget and optionally deleting the instrumentation.
 */
function capInstnMakeWidget(instn, removecb) {
    var options = {
        title: instn.title(),
        panel: capPanel,
        pxHeight: capGraphHeight,
        pxWidth: capGraphWidth,
        onremove: function () {
            removecb(widget, instn);
        },
        oninstn: function (newinstn) {
            capInstnMakeWidget(newinstn, capInstnRemoveNew);
        }
    };
    var cons;
    if (instn.isNumericDecomposition()) {
        cons = caWidgetHeatMap;
        options.source = instn;
    } else {
        cons = caWidgetLineGraph;
        options.sources = [
            {instn: instn}
        ];
    }

    capPanel.instnAdd(instn);
    var widget = new cons(options);
    capWidgets.push(widget);

    $(widget.caElement).hide();
    $(widget.caElement).appendTo(capDomContent);
    $(widget.caElement).slideDown(100);
}

/*
 * Removes the given widget from the UI.
 */
function capWidgetRemove(widget, callback) {
    $(widget.caElement).fadeOut(250, function () {
        $(widget.caElement).remove();
        capWidgets.splice(capWidgets.indexOf(widget), 1);
        callback();
    });
}

/*
 * "remove" callback for instrumentations created by the user.  This removes the
 * widget itself and then deletes the instrumentation from the server.
 */
function capInstnRemoveNew(widget, instn) {
    capWidgetRemove(widget, function () {
        capPanel.widgetRemove(widget);
        capBackend.instnDelete(instn, function () {});
    });
}

/*
 * "remove" callback for instrumentaitons loaded from the server.  This presents
 * the user with the option of just removing the widget or also deleting the
 * instrumentaiton from the server.
 */
function capInstnRemoveServer(widget, instn) {
    var div = $([
        '<div>',
        'This instrumentation was loaded from the server and another user ',
        'may still be using it.',
        '</div>'
        ].join('\n'));

    $(div).dialog({
        resizable: false,
        modal: true,
        title: 'Remove loaded instrumentation',
        width: '400px',
        buttons: {
            'Just remove it from this screen': function () {
                $(this).dialog('close');
                capWidgetRemove(widget, function () {
                    capPanel.widgetRemove(widget);
                });
            },
            'Delete it anyway': function () {
                $(this).dialog('close');
                capInstnRemoveNew(widget, instn);
            }
        }
    });
}

/*
 * Report an error to the user.
 */
function capError(err) {
    var div = $([
        '<div>',
        '<p><span class="ui-icon ui-icon-alert caDialogIcon"></span>',
        err.message,
        '</p>',
        '</div>'
        ].join('\n'));

    $(div).dialog({
        resizable: false,
        modal: true,
        title: 'Error',
        width: '400px',
        buttons: {
            OK: function () {
                $(this).dialog('close');
            }
        }
    });
}

</script>


</body> 
</html> 
