#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

"use strict";

var LOG = require('bunyan').createLogger({name:'bundler'});

var async = require('async');
var fs = require('fs');
var path = require('path');
var browserify = require('browserify');

var shim = require('browserify-shim');
var format = require('util').format;
var join = path.join;

var uglify = require('uglify-js');

var buildLESS = require('../lib/assets').buildLESS;


var root = path.resolve(__dirname, '..', 'www', 'js');


var shimConfig = {
    'jquery': { path: './lib/jquery', exports: '$' },
    'jquery.serializeObject': {
        path: './lib/jquery.serializeObject',
        depends: {'jquery': '$'},
        exports: null
    },
    'jquery.autosize': {
        path: './lib/jquery.autosize',
        depends: {'jquery': '$'},
        exports: null
    },
    'jquery.chosen': {
        path: './lib/chosen.jquery',
        depends: { 'jquery': '$' },
        exports: null
    },
    'bootstrap': { path: './lib/bootstrap', exports: null },
    'd3': {
        path: './lib/d3.v3',
        exports: 'd3'
    },
    'showdown': {
        path: './lib/showdown',
        exports: 'Showdown'
    },
    'react-chosen': {
        path: './lib/react-chosen',
        depends: {
            'react': 'React'
        },
        exports: 'Chosen'
    },
    'bootstrap.tags': {
        path: './lib/bootstrap-tags',
        depends: {'jquery': '$'},
        exports: null
    },
    'typeahead': { path: './lib/typeahead.jquery', exports: null },
    'bloodhound': { path: './lib/bloodhound', exports: 'Bloodhound'},
    'backbone.marionette': {
        path: './lib/backbone.marionette',
        exports: null,
        depends: {
            'jquery': '$',
            'underscore': '_',
            'backbone': 'Backbone'
        }
    },
    'backbone.modelbinder': { path: './lib/Backbone.ModelBinder', exports: null },

    'backbone.syphon': {
        path: './lib/backbone.syphon',
        exports: null,
        depends: {
            'backbone': 'Backbone',
            'underscore': '_'
        }
    },
    'backbone.stickit': {
        path: './lib/backbone.stickit',
        exports: null,
        depends: {
            'backbone': 'Backbone',
            'underscore': '_'
        }
    },
    'raphael': {
        path: './lib/raphael-min',
        exports: 'Raphael'
    },
};

Object.keys(shimConfig).forEach(function(k) {
    if (shimConfig[k].path) {
        shimConfig[k].path = join(root, shimConfig[k].path);
    }
});

var prepAppBundle = function() {
    var opts = {
        extensions: ['.js', '.jsx'],
        debug: true
    };

    var bundle = shim(browserify(opts), shimConfig);

    bundle
        .transform(require.resolve(join(root, './transforms/tpl')))
        .transform(require('reactify'))
        .require(require.resolve(join(root, './adminui')), {expose: 'adminui', entry: true});

    bundle.external('jquery');
    bundle.external('moment');
    bundle.external('underscore');
    bundle.external('underscore.string');
    bundle.external('epoch');
    bundle.external('react');
    bundle.external('backbone');
    bundle.external('superagent');
    bundle.external('bootstrap.datetimepicker');

    return bundle;
};

function prepLibsBundle() {
    var opts = {
        noParse: [ require.resolve(join(root, './lib/epoch.0.5.2.min')) ]
    };

    var blibs = browserify(opts);
    blibs.require('react');
    blibs.require('underscore');
    blibs.require('underscore.string');
    blibs.require('backbone');
    blibs.require('superagent');
    blibs.require(require.resolve(join(root, './lib/bootstrap-datetimepicker')), { expose: 'bootstrap.datetimepicker'});
    blibs.require(require.resolve(join(root, './lib/jquery')), { expose: 'jquery'});
    blibs.require(require.resolve(join(root, './lib/moment.min')), {expose: 'moment'});
    blibs.require(require.resolve(join(root, './lib/epoch.0.5.2.min')), { expose: 'epoch'});

    return blibs;
}


(function rebundle() {
    var ba = prepAppBundle();
    ba.on('update', function() {
        bundle(ba, 'app.js', done);
    });
    var bl = prepLibsBundle();
    bl.on('update', function() {
        bundle(bl, 'libs.js', done);
    });

    async.parallel([
        function(cb) {
            LOG.info('[app.css] BUILDING');
            buildLESS(function(buildErr, css) {
                if (buildErr) {
                    LOG.fatal('[app.less] BUILD ERRR', buildErr);
                    return;
                }

                LOG.info('[app.css] WRITING');
                fs.writeFile(join(root, '..', 'app.css'), css, function(err) {
                    if (err) {
                        LOG.fatal('[app.css] WRITE ERRR', err);
                    } else {
                        LOG.info('[app.css] OK (%s bytes)', css.length);
                    }

                });
            });
        },
        function(cb) {
            bundle(ba, 'app.js', cb);
        },
        function(cb) {
           bundle(bl, 'libs.js', cb);
        }
    ], done);

    function done(err, res) {
        if (err) {
            LOG.fatal('ERROR BUILDING');
        } else {
            LOG.info('ALL DONE.');
        }
    }
})();

function bundle(bundler, out, cb) {
    var t = new Date().getTime();

    var outPath = path.join(root, '..', out);
    var tmpPath = format('%s.%s', outPath, t);

    LOG.info('[%s] building', out);

    var bs = bundler.bundle();

    var bytes, time;
    bundler.on('bytes', function(b) { bytes = b; });
    bundler.on('time', function(t) { time = t; });

    bs.on('error', function(err) {
        LOG.fatal(err, '[%s] BUILD ERROR', out);
    });

    bs.on('end', function() {
        if (bytes && time) {
            LOG.info('[%s] %s bytes (%s seconds)', out, bytes, (time / 1000).toFixed(2) );
        } else {
            LOG.info('[%s] OK', out);
        }
        fs.rename(tmpPath, outPath, function() {
            if (process.env.MINIFY) {
                var min;
                try {
                    min = uglify.minify(outPath);
                    fs.writeFileSync(outPath + '.min.js', min.code, 'utf8');
                    LOG.info('[%s.min.js]', out);
                    fs.rename(outPath+'.min.js', outPath, function() {
                        LOG.info('[%s.min.js] -> [%s]', out, out);
                        cb(null, out);
                    });
                } catch (e) {
                    LOG.fatal(e, 'Error minifying output');
                    cb(e);
                }
            } else {
                cb(null, out);
            }
        });
    });

    bs.pipe(fs.createWriteStream(tmpPath));
}
